Ćwiczenie 1. Własna biblioteka, javadoc, JavaFX oraz internacjonalizacja.


Ćwiczenie polega na utworzeniu okienkowej aplikacji służącej do rozwiązania problemu plecakowego. Ogólnie (szczegóły dalej) ćwiczenie dzieli się na etapy:


Napisanie (w projekcie nr 1) zestawu klas do rozwiązywania problemy plecakowego.

Wygenerowanie dla powyższych klas dokumentacji javadoc.

Spakowanie powyższych klas do pliku .jar i utworzenie biblioteki.

Napisanie (w osobnym projekcie nr 2) okienkowej aplikacji JavaFX, która umożliwia podanie instancji problemu do rozwiązania.

Wykorzystanie w projekcie 2 biblioteki .jar z projektu 1.

Wykorzystanie w aplikacji mechanizmów internacjonalizacji i tworzenia zasobów.

Szczegółowy opis etapów:


Etap 1 (problem plecakowy).


Należy napisać bibliotekę do rozwiązywania problemu plecakowego z użyciem co najmniej 2 algorytmów (każdy w osobnej klasie). Klasy powinny mieć jednolity interfejs (co oznacza wykorzystanie mechanizmu interfejsu/implementacji lub dziedziczenia). Klasy algorytmów powinny posiadać również metodę zwracającą opis algorytmu (jako String).


Wartość przedmiotu powinna być liczbą typu float/double (potrzebne to będzie do etapu 6), zaś rozmiar przedmiotu i pojemność plecaka powinny być liczbą typu int.


Przykładowa biblioteka może zawierać: (1) klasę przedmiotu, (2) klasę instancji (lista przedmiotów oraz pojemność plecaka), (3) klasę abstrakcyjną/interfejs dla algorytmów, (4–6) klasy algorytmów oraz ewentualnie (7) klasę wyniku (która pozwoli stwierdzić jakie przedmioty należy spakować i jaka jest ostateczna wartość plecaka).


Proponowane algorytmy: (1) przegląd losowy (wybieranie losowych przedmiotów do momentu aż nie zabraknie miejsca w plecaku, powtórzenie tego algorytmu np. 100 razy i wybranie najlepszego wyniku), (2) przegląd zupełny (można zrobić z użyciem zagnieżdżonej pętli for i techniki masek bitowych), (3) algorytm zachłanny (priorytetem wyboru przedmiotów jest stosunek wartości do masy) oraz (4) programowanie dynamiczne (uwaga na sposób generowania rozwiązania, czyli tego które przedmioty trzeba wziąć!).


Uwaga: problem plecakowy będzie wykorzystywany w niektórych innych ćwiczeniach, więc porządne napisanie biblioteki skróci czas innych ćwiczeń!


Etap 2 (Javadoc).


Dla klas z etapu 1 należy dodać dokumentację Javadoc. Należy umieścić opisy: klas, metod, pól, argumentów metod i wartości zwracanych metod. Doumentację Javadoc należy wyświetlić w przeglądarce (jako HTML). Dobrze jeśli Javadoc zapewni podpowiedzi przy korzystaniu z biblioteki (etap 5).


Etap 3 (biblioteka).


Należy utworzyć bibliotekę (plik .jar zawierający pliki .class, nie .java!) z klas z etapu 1, tak by można go było użyć w innym projekcie (etap 5). Oznacza to, że projekt docelowy nie powinien znać kodu źródłowego biblioteki (jedynie interfejs, kod bajtowy i ewentualnie javadoc).


Etap 4 (aplikacja JavaFX).


Należy utworzyć aplikację okienkową z użyciem JavaFX (wymóg!). Estetyka nie jest szczególnie istotna. Istotne są za to:


Aplikacja powinna umożliwić podanie instancji problemu plecakowego (np. dodawanie po kolei przedmiotów do listy i podanie pojemności plecaka), wybranie algorytmu rozwiązania i jego uruchomienie (etap 5), wraz z podaniem wyniku (ostateczna wartość plecaka i które przedmioty należy zabrać).

Aplikacja powinna wspierać mechanizmy internacjonalizacji (patrz etap 6).

Aplikacja powinna być odpowiednio bogata w kontrolki (widgety), żeby zaznajomić się z użyciem JavaFX. Przykłady:

pola tekstowe (podanie parametrów instancji),

przyciski (dodanie przedmiotu, uruchomienie algorytmu),

lista rozwijana (wybór algorytmu),

etykiety (opisujące powyższe elementy),

tabelka/lista (pokazująca dodane przedmioty),

menu i podmenu (np. wyjście, o programie, wybór języka do etapu 6),

dowolny obrazek (np. plecaka),

aktualną datę w formacie zgodnym z locale (patrz etap 6).

Etap 5 (wykorzystanie biblioteki).


Należy zaimportować bibliotekę z etapu 3 i wykorzystać ją w aplikacji z etapu 4.


Etap 6 (internacjonalizacja i zasoby).


Należy dodać do aplikacji ikonę (zasób) oraz mechanizmy internacjonalizacji, co obejmuje:


Opcję wyboru języka/locale (najlepiej w podmenu, patrz etap 4). Aplikacja powinna wspierać co najmniej pl/PL, en/GB i en/US.

Język aplikacji (m.in. etykiety) powinny zmieniać się po zmianie locale.

Kropka dziesiętna w wyświetlanych wartościach przedmiotów (które są float/double, wspomniane w etapie 1) powinna wyświetlać się zależnie od locale.

Aktualna data powinna wyświetlać się zależnie od locale (GB i US mają inny format).

Aplikacja powina wyświetlać aktualną liczbę przedmiotów słownie (ang: 1 item, 2 items..., pl: 1 przedmiot, 2 przedmioty, 5 przedmiotów...). Najlepiej wykorzystać do tego mechanizm wariantów.



Ćwiczenie 2. Wątki, miękkie referencje i mechanizm refleksji.


Ćwiczenie polega na stworzeniu konsolowej aplikacji wielowątkowej, w której:


Wątki rozwiązują losowe instancje problemu plecakowego.

Algorytmy do rozwiązywania ładowane są z osobnego katalogu z wykorzystaniem mechanizmu refleksji.

Rozwiązania umieszczane są w pamięci podręcznej.

Badane są dodatkowe typy referencji (miękkie, słabe, fantomowe).

Wymagania szczegółowe:


Należy utworzyć strukturę danych (mapę) będącą pamięcią podręczną rozwiązanych instancji problemu plecakowego. Szczegóły:

Kluczem struktury powinna być liczba typu long (jest to ziarno, patrz dalej).

Wartością struktury powinno być rozwiązanie problemu plecakowego (zebrane do plecaka przedmioty i ich łączna wartość).

Należy odpowiednio wykorzystać mechanizm miękkich referencji, by Garbage Collector usuwał stare wpisy w pamięci podręcznej, by zrobić miejsce na nowe. Jak działanie aplikacji zmieni się po wykorzystaniu zwykłych (silnych) lub słabych referencji zamiast miękkich?

Pamięć podręczna powinna także przechowywać licznik ogólnych odwołań do niej oraz licznik nieudanych odwołań (próba odniesienia się do klucza, którego nie ma obecnie w pamięci podręcznej).

Należy utworzyć wątki, które cyklicznie próbują rozwiąząć losowe instancje problemu plecakowego i umieścić wynik w pamięci podręcznej. Szczegóły:

Do generowania instancji problemu plecakowego należy wykorzystać ziarno dla generatora pseudolosowego. Tzn. powinna być metoda generująca instancję na podstawie podanego ziarna (dwukrotne podanie tego samego ziarna ma powodować otrzymanie tej samej instancji!).

Wątki powinny losować ziarno, po czym sprawdzać czy w pamięci podręcznej istnieje już rozwiązanie instancji o tym ziarnie. Jeśli nie, to instancję należy wygenerować, rozwiązać używając losowego algorytmu (patrz dalej), po czy wynik umieścić w pamięci podręcznej.

Dostęp do zasobów współdzielonych (pamięć podręczną, konsola, kolekcja algorytmów) musi być synchronizowany.

W konsoli należy umieścić log: wątki powinny raportować co robią m.in. który wątek rozwiązuje jaką instancję (jaki seed) i jakim algorytmem.

Osobny wątek (może to być wątek główny), dzięki któremu można: (1) załadować klasy algorytmów, (2) wyładować te klasy, (3) wypisać opis obecnie załadowanych klas algorytmów.

Powyższy wątek powinien też raz na jakiś czas raportować odsetek chybień w pamięci (bazując na licznikach które przechowuje pamięć podręczna).

Algorytmy do używania przez wątki powinny być wczytywane korzystając z mechanizmu refleksji. Szczegóły:

Wątki używają kolekcji (listy) algorytmów dla problemu plecakowego.

Początkowo kolekcja powinna być pusta (jeśli wątki natrafią na taką sytuację, to nie wybierają algorytmu i przechodzą do następnego cyklu).

Klasy z algorymami rozwiązania mają być dostarczone w postaci plików .class w osobnym katalogu oraz wczytywane do powyższej kolekcji za pomocą mechanizmu refleksji.

Nie należy czynić żadnych założeń odnośnie liczby i rodzaju algorytmów (zaprojektowany mechanizm ładowania ma sam wczytać wszystkie znalezione klasy, a nie wczytywać pliki na bazie hardkodowanych nazw/ścieżek).

Dodatkowe punkty za stworzenie algorytmu "bestOf": algorytm ten powinien wykonywać 2 inne algorytmy przybliżone i zwracać lepszy z wyników. Uwaga: (1) to ma sens jedynie dla algorytmów przybliżonych (czyli nie dla przeglądu zupełnego i nie dla programowania dynamicznego) oraz (2) celem tego jest pokazanie umiejętności załadowania i użycia klasy zależnej od innych ładowanych klas.

Wskazówki i uwagi pomocnicze:

Należy odpowiednio określić sposób generacji instancji na bazie ziarna. W szczególności rozmiar problemu powinien mieścić się w sensownym zakresie (np. przydatny będzie operator modulo). Zakres ten będzie wpływał na czas pracy algorytmów.

Wątki można usypiać pomiędzy każdym cyklem, tak by dało się obserwować działanie wątków (by informacje na konsoli nie pojawiały się i znikały za szybko).

Można też usypiać wątki po wykonaniu algorytmu, jeśli algorytm wykonuje się za szybko (symulacja dłuższych obliczeń).

Można sterować pamięcią sterty dostępną dla maszyny Java'y za pomocą odpowiednich opcji (-Xms, -Xmx). Rozmiar dostępnej sterty wraz z zakresem ziarna i rozmiarem problemu powinien wpływać na obserwowany odsetek chybień w pamięci. Należy znaleźć orientacyjne punkty, przy których (po pewnym czasie) nie ma chybień i przy których współczynnik chybień jest duży (> 0.75).

Załadowanie i wyładowanie klas powinno dać się zauważyć z użyciem odpowiednich narzędzi (jconsole).




Ćwiczenie 3. Ziarna Java'y.


Należy zaprojektować ziarenko posiadające:


właściwości wszystkich możliwych typów (proste, ograniczone, wiązane),

graficzną reprezentację,

klasę opisową BeanInfo z klasami pomocniczymi edytorów (należy zwrócić uwagę na metodę getJavaInitializationString) i customizera (należy zwrócić uwagę na metodę setObject), służącymi do zmian właściwości ziarenka

Ziarenko należy przetestować w środowisku programowania, tzn. najpierw utworzyć paczkę jar ze wszystkimi klasami niezbędnymi do funkcjnowania ziarenka, następnie włączyć ten jar do testowego projektu, w którym ziarenko zostanie wstawione na jakiś panel za pomocą wizarda (przy okazji powinno dać się zmodyfikować parametry ziarenka), a na koniec sprawdzić działanie stworzonej aplikacji.


Rola jaką pełnić będzie ziarenko jest do wyboru. Może to być np. terminarz z możliwością edytowania datowanych notatek (np. dodawanie, wyszukiwanie notatek z danego okresu itp.). W tym przypadku właściwościami ziarenka mogą być: tytuł panelu (właściwość prosta), rozmiar pola tekstowego (właściwość wiązana), ramy czasowe terminarza (właściwość ograniczona).






Ćwiczenie 4. Zdalne wywoływanie metod (RMI).


Należy napisać system klient-serwer do rozwiązywania problemu plecakowego z wykorzystaniem RMI. Szczegóły:


Powinny powstać trzy aplikacje: klient, serwer oraz spis (uwaga: jest to spis serwerów i jest to zupełnie inna rzecz niż rejestr RMI!).

Aplikacja spis powinna implementować dwie metody możliwe do wywołania poprzez RMI:

Metodę bool register( OS ), gdzie OS może być prostą klasą przechowującą dwa Stringi: nazwę rejestrowanego serwera i opis implementowanego przez niego algorytmu rozwiązania problemu plecakowego. Metoda powinna rejestrować podany serwer w spisie i zwracać wynik true/false, w zależności od tego czy operacja się udała.

Metodę List<OS> getServers(), która zwraca listę serwerów (tj. listę par nazwa-opis algorytmu).

Aplikacja serwera powinna implementować metodę S solve( I ), możliwą do wywołania poprzez RMI, gdzie I jest jakąś klasą reprezentującą instancję problemu plecakowego, zaś S jest jakąś klasą zawierającą rozwiązanie problemu plecakowego.

Powstały system ma umożliwiać przeprowadzenie operacji w stylu:

Uruchomienia aplikacji spisu.

Uruchomienia aplikacji serwera, które automatycznie powinna rejestrować się w spisie.

Uruchomienia i przetestowania co najmniej dwóch aplikacji klienckich. Aplikacje klienckie powinny posiadać interfejs umożliwiający wyświetlenie obecnie zarejestrowanych w spisie serwerów, wygenerowania losowej instancji problemu plecakowego (wraz z jej wyświetleniem w konsoli) oraz rozwiązania jej poprzez zadany serwer (wraz z wyświetleniem wyniku na ekranie klienta).

Uruchomienie drugiej (lub więcej) aplikacji serwerowej, która implementuje inny algorytm rozwiązania, po czym ponowne przetestowanie obu klientów.

Aplikacje serwera i spisu również powinny posiadać interfejs konsolowy i drukować log prowadzonych operacji.



Ćwiczenie 5. Bazy danych i XML w Java'ie.


Należy utworzyć prostą bazę danych SQL i zapełnić ją przykładowymi danymi (można użyć dowolnych narzędzi typu PHPMyAdmin czy prostych skryptów SQL-owych uruchamianych z konsoli). Wystarczą dwie tabele, przy czym na wyższą ocenę powinny być one powiązane relacją. Tematyka bazy danych dowolna.


Należy stworzyć prostą aplikację bazodanową z użyciem JDBC wykorzystując co najmniej po jednym przykładzie dla każdej z następujących możliwości: (1) wyświetlanie danych (SELECT), (2) dodawanie danych do bazy (INSERT), (3) modyfikacja danych w bazie (UPDATE). Należy zwracać uwagę na obsługę błędów i odpowiednią komunikację z użytkownikiem.


W tej samej aplikacji należy dodatkowo wykorzystać JAXB do importowania i eksportowania części danych z/do bazy z użyciem XML-a (można do tego wykorzystać osobną tabelę niepowiązaną).



Ćwiczenie 6. Komunikacja sieciowa z użyciem SOAP.


Należy zaprojektować sieciowy system wymiany wiadomości, składający się z pewnej liczby osobnych aplikacji (konsolowych lub okienkowych) działający w topologii jednokierunkowego pierścienia (wszystko fizycznie na jednym komputerze). Tzn. jeśli mamy 4 aplikacje A, B, C, D, to tworzą one topologię A → B → C → D → A, gdzie wiadomość może być przekazana jedynie w kierunku wskazanym przez strzałki.


Zadanie należy zrealizować z wykorzystaniem protokołu SOAP oraz gniazdek sieciowych TCP/IP (można wykorzystać np. pakiet javax.xml.soap.*). Treść samej wiadomości powinna być przenoszona w ciele (body) koperty SOAP-owej, a pozostałe informacje (potrzebne do obsługi transmisji) w jej nagłówku (header). Można też wykorzystać framework Apache Axis/Axis2.


System powinien wspierać 2 tryby adresowania wiadomości: 

Unicast: dane wysyłane do konkretnego węzła.

Broadcast: dane wysyłane do wszystkich węzłów poza nadawcą.

Interfejs (konsolowy lub okienkowy) każdej aplikacji powinien być podzielony na kilka części: 

Część do wysyłania wiadomości. Powinna umożliwić wybór adresata/trybu adresacji, zredagowanie wiadomości oraz jej wysłanie.

Część do odbierania wiadomości. Powinna wyświetlać odebrane wiadomości przeznaczone dla danego węzła wraz z nadawcą.

Część diagnostyczną. Powinna ona wyświetlać informacje diagnostyczne do wizualizacji działania sieci (np. fakt przesłania wiadomości dalej do innego węzła, szczegóły nagłówka itp)..


Ćwiczenie 7. Szyfry, podpisywanie plików JAR.


Należy napisać program konsolowy, który podzielony jest na dwie części:


Część która pozwala szyfrować i rozszyfrowywać pliki tekstowe z wykorzystaniem istniejącego szyfru (nie mylić z szyfru z kodem ani z funkcją mieszającą!). Powinno dać się odszyfrować plik zaszyfrowany w poprzednim uruchomieniu aplikacji.

Część do rozwiązywania problemu plecakowego korzystająca z biblioteki w pliku JAR, podobnie jak w ćwiczeniu 1 z tą różnicą że: (1) aplikacja jest konsolowa, (2) plik JAR musi być podpisany cyfrowo (należy m.in. wygenerować klucz prywatny i publiczny), a podpis musi dać się zweryfikować.

W zadaniu należy również wykorzystać Java'owe pliki polityki i uprawnień (permissions).


Ćwiczenie 8. Wdrożenie aplikacji Java z wykorzystaniem JavaWS.


Należy napisać program, który można będzie uruchomić poprzez JavaWS. Podczas realizacji zadania należy wygenerować plik JNLP oraz przetestować jego załadowanie na lokalnej maszynie. Podczas realizacji ćwiczenia można skorzystać z narzędzi typu serwer Apache Tomcat (na nim opublikowane powinny być plik JNLP oraz jar z aplikacją).


Aplikacja powinna być okienkowa. Tematyka samej aplikacji jest dowolna, należy jednak zwrócić uwagę na ograniczenia wynikające z mechanizmów JavaWS/JNPL.




Lab 9. Wykorzystanie kodu natywnego oraz skryptów w aplikacjach wykorzystujących sztuczną inteligencję.


Należy napisać aplikację do gry z komputerem w kółko i krzyżyk na planszy 4 × 4 (ale do wygranej wystarczają 3 symbole w rzędzie/kolumnie/przekątnej, nie 4). Dalej należy napisać algorytmy sztucznej inteligencji dostarczające metody do generowania kolejnych ruchów (decyzji) gracza komputerowego według jakiejś strategii za pomocą obu poniższych technik.


Technika pierwsza. Skrypty JavaScript z wykorzystaniem silnika Nashorn. Skrypty powinny być wczytywane ze wskazanego katalogu w sposób dynamiczny – ma być możliwość zmiany strategii (skryptu) podczas działania aplikacji, włącznie z dodaniem nowego skryptu do katalogu. Należy założyć, że wszystkie metody generujące kolejne ruchy mają taką samą listę argumentów oraz zwracają wartości takiego samego typu. W załadowanych skryptach dozwolone jest wykorzystanie klas Java'y.


Technika druga. Wykorzystanie kodu natywnego z użyciem JNI. Polega to na wywołaniu funkcji C/C++ i odebraniu jej wyniku. Na niższą ocenę funkcje mogą przyjmować stan planszy jako liczba typu int (każde pole ma 3 możliwe stany, więc 16 pól planszy da się zakodować na 32 bitach. Można też wysłać 4 inty, każdy to osobny wiersz). Na wyższą ocenę należy przesłać tablicę.


Dla każdej techniki zaimplementować przynajmniej 2 strategie gracza komputerowego (mogą być te same dla obu technik). Na wyższą ocenę powinna pojawić się jedna średniozaawansowana lub zaawansowana strategia (najlepiej algorytm minimax).


Aplikacja (konsolowa lub okienkowa, ale ta pierwsza będzie łatwiejsza) powinna umożliwiać grę, zmianę algorytmu/techniki na bieżąco oraz wyświetlać przebieg rozgrywki.








Ćwiczenie 10. Monitorowanie i zmiana przebiegu działania aplikacji z użyciem JMX.


Należy zmodyfikować program z ćwiczenia 2. Podstawową zmianą jest ustalenie maksymalnego rozmiary pamięci podręcznej. Jeśli chcemy dodać nowy wpis, a pamięć podręczna posiada maksymalną liczbę wpisów, to trzeba usunąć jakiś istniejący wpis. Nie ma też konieczności używania miękkich referencji (mogą być zwykłe), bo zarządzanie pamięcią będzie ręczne, a nie automatyczne z użyciem Garbage Collectora.


Korzystając z JMX należy stworzyć w aplikacji ziarenko MBean lub MXBean posiadające:


Właściwość pozwalającą ustawić liczbę wątków (od 0 wzwyż).

Właściwość pozwalającą ustawić rozmiar pamięci podręcznej (od 1 wzwyż).

Metodę zwracającą wiadomość o stanie aplikacji tj.:

liczbie wątków,

stanie pamięci podręcznej (liczba zajętych wpisów, liczba wolnych wpisów),

procencie chybień (błędów) pamięci podręcznej.

Należy wykorzystać jmc lub jconsole by podłączyć się do aplikacji i skorzystać z utworzonego ziarenka w celu monitorowania i zmiany przebiegu działania aplikacji.